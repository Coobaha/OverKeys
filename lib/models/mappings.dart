// https://github.com/jtroo/kanata/blob/a9dabfcb07e22c9efa0bc15349780b10afacb6cd/parser/src/keys/mod.rs as guide

class Mappings {
  static const Map<String, String> keyMappings = {
    '‚óÑ': 'Left',
    '‚Üê': 'Left',
    '‚óÄ': 'Left',
    'LEFT': 'Left',
    '‚ñ≤': 'Up',
    '‚Üë': 'Up',
    'UP': 'Up',
    '‚ñ∫': 'Right',
    '‚Üí': 'Right',
    '‚ñ∂': 'Right',
    'RIGHT': 'Right',
    '‚ñº': 'Down',
    '‚Üì': 'Down',
    'DOWN': 'Down',
    '‚èé': 'Enter',
    '‚Üµ': 'Enter',
    '‚Ü©': 'Enter',
    '‚å§': 'Enter',
    '‚ê§': 'Enter',
    'ENTER': 'Enter',
    'ENT': 'Enter',
    'RETURN': 'Enter',
    'RET': 'Enter',
    '‚å´': 'Backspace',
    '‚êà': 'Backspace',
    'BSPC': 'Backspace',
    'BS': 'Backspace',
    'BKSP': 'Backspace',
    'BKS': 'Backspace',
    '‚å¶': 'Delete',
    '‚ê°': 'Delete',
    'DEL': 'Delete',
    'DELETE': 'Delete',
    '‚≠æ': 'Tab',
    '‚Üπ': 'Tab',
    'TAB': 'Tab',
    '‚ê£': ' ',
    '‚éµ': ' ',
    '‚ê†': ' ',
    'SPC': ' ',
    'SPACE': ' ',
    '‚éã': 'Escape',
    'ESC': 'Escape',
    '‚á™': 'CapsLock',
    'CAPS': 'CapsLock',
    '‚§ì': 'PageDown',
    '‚áü': 'PageDown',
    'PGDN': 'PageDown',
    '‚§í': 'PageUp',
    '‚áû': 'PageUp',
    'PGUP': 'PageUp',
    '‚á±': 'Home',
    '‚á§': 'Home',
    '‚Üñ': 'Home',
    'HOME': 'Home',
    '‚á≤': 'End',
    '‚á•': 'End',
    '‚Üò': 'End',
    'END': 'End',
    // Treating VK_(modifier) as default VK_(left modifier) for now
    // '‚áß': 'Shift',
    // 'SFT': 'Shift',
    // 'SHFT': 'Shift',
    // 'SHIFT': 'Shift',
    '‚áß': 'LShift', // Map Unicode shift symbol to LShift (matches Swift output)
    'SFT': 'LShift',
    'SHFT': 'LShift',
    'SHIFT': 'LShift',
    '‚Äπ‚áß': 'LShift',
    'LSFT': 'LShift',
    'LSHFT': 'LShift',
    'LSHIFT': 'LShift',
    '‚áß‚Ä∫': 'RShift',
    'RSFT': 'RShift',
    'RSHFT': 'RShift',
    'RSHIFT': 'RShift',
    // '‚åÉ': 'Control',
    // '‚éà': 'Control',
    // 'CTL': 'Control',
    // 'CTRL': 'Control',
    '‚åÉ':
        'LControl', // Map Unicode control symbol to LControl (matches Swift output)
    '‚éà': 'LControl',
    'CTL': 'LControl',
    'CTRL': 'LControl',
    '‚Äπ‚åÉ': 'LControl',
    '‚Äπ‚éà': 'LControl',
    'LCTL': 'LControl',
    'LCTRL': 'LControl',
    // '‚å•': 'Alt',
    // '‚éá': 'Alt',
    // 'ALT': 'Alt',
    '‚å•': 'LAlt', // Map Unicode alt symbol to LAlt (matches Swift output)
    '‚éá': 'LAlt',
    'ALT': 'LAlt',
    '‚Äπ‚éá': 'LAlt',
    '‚Äπ‚å•': 'LAlt',
    'LALT': 'LAlt',
    '‚éá‚Ä∫': 'RAlt',
    '‚å•‚Ä∫': 'RAlt',
    'RALT': 'RAlt',
    '‚åÉ‚Ä∫': 'RControl',
    '‚éà‚Ä∫': 'RControl',
    'RCTL': 'RControl',
    'RCTRL': 'RControl',
    '‚åò': 'Cmd', // Map Unicode command symbol to Cmd (matches Swift output)
    '‚äû': 'WIN',
    '‚óÜ': 'WIN',
    '‚ùñ': 'WIN',
    'WIN': 'Win',
    '‚éÄ': 'INS',
    'INS': 'Insert',
    'INSERT': 'Insert',
    'üî¢‚ÇÄ': 'NUM 0',
    'üî¢‚ÇÅ': 'NUM 1',
    'üî¢‚ÇÇ': 'NUM 2',
    'üî¢‚ÇÉ': 'NUM 3',
    'üî¢‚ÇÑ': 'NUM 4',
    'üî¢‚ÇÖ': 'NUM 5',
    'üî¢‚ÇÜ': 'NUM 6',
    'üî¢‚Çá': 'NUM 7',
    'üî¢‚Çà': 'NUM 8',
    'üî¢‚Çâ': 'NUM 9',
    'üî¢‚ÅÑ': 'NUM /',
    'üî¢‚Çä': 'NUM +',
    'üî¢‚àó': 'NUM *',
    'üî¢‚Çã': 'NUM -',
    'üî¢Ôºé': 'NUM .',
    '‚á≠': 'NUM LOCK',
    'NLK': 'NUM LOCK',
    'NLCK': 'NUM LOCK',
    '‚á≥üîí': 'SCROLL LOCK',
    'SLCK': 'ScrollLock',
    'SCRLCK': 'ScrollLock',
    '‚Äê': '-',
    '‚Çå': '='
  };
  static String getKeyForSymbol(String symbol) {
    return keyMappings[symbol] ?? symbol;
  }

  static String? getShiftedSymbol(String symbol) {
    const Map<String, String> shiftedSymbols = {
      '`': '~',
      '1': '!',
      '2': '@',
      '3': '#',
      '4': '\$',
      '5': '%',
      '6': '^',
      '7': '&',
      '8': '*',
      '9': '(',
      '0': ')',
      '-': '_',
      '=': '+',
      '[': '{',
      ']': '}',
      '\\': '|',
      ';': ':',
      '\'': '"',
      ',': '<',
      '.': '>',
      '/': '?'
    };

    return shiftedSymbols[symbol] ?? symbol;
  }

  // AIDEV-NOTE: Human-friendly names for ZMK keys and macros
  static String getDisplayName(
      String zmkKey, Map<String, String>? actionMappings) {
    if (actionMappings != null && actionMappings.containsKey(zmkKey)) {
      // Don't return the action, just use this as indication this is a semantic key
      // The original zmkKey (like "Cut", "Copy") is already the display name we want
      return zmkKey;
    }

    // Single character keys - return as uppercase
    if (zmkKey.length == 1) {
      return zmkKey.toUpperCase();
    }

    return zmkKey;
  }
}
